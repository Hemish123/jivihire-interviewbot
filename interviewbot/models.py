from django.db import models
from manager.models import JobOpening
from candidate.models import Candidate,ResumeAnalysis
from django.db.models import JSONField


class InterviewAnswer(models.Model):
    job_opening = models.ForeignKey(JobOpening, on_delete=models.CASCADE, null=True, blank=True)
    candidate = models.ForeignKey(Candidate, on_delete=models.CASCADE, related_name="interview_answers", null=True, blank=True)
    resume_analysis = models.ForeignKey(ResumeAnalysis, on_delete=models.SET_NULL, null=True, blank=True, related_name="interview_answers")
    question = models.TextField()
    given_answer = models.TextField()
    audio_transcript = models.TextField(null=True, blank=True)
    is_correct = models.BooleanField(null=True, blank=True)
    video = models.FileField(upload_to='interviews/', null=True, blank=True)
    submitted_at = models.DateTimeField(auto_now_add=True)

    # Scores generated by GPT
    question_score = models.DecimalField(null=True, blank=True, max_digits=5, decimal_places=2)
    skill_scores = JSONField(null=True, blank=True)  # e.g., {"Communication": 80, "Problem Solving": 70}
    technical_skills_score = models.DecimalField(             # <--- New field added
        null=True, blank=True, max_digits=5, decimal_places=2,
        help_text="Score (0â€“100) representing overall technical skill demonstrated."
    )
    source = models.CharField(max_length=20, choices=[('job', 'Job'), ('resume', 'Resume')], default='job')


class InterviewQuestion(models.Model):
    job_opening = models.ForeignKey(JobOpening, on_delete=models.CASCADE, related_name="questions")
    text = models.TextField()
    is_selected = models.BooleanField(default=False)
    is_custom = models.BooleanField(default=False)  # <-- Track recruiter-created ones
    created_at = models.DateTimeField(auto_now_add=True)


class OldJobOpening(models.Model):
  temp = models.IntegerField(null=True, blank=True)  # dummy field
  class Meta:

        app_label = 'interviewbot'

        db_table = 'interviewbot_jobopening'
        managed = True

class OldCandidate(models.Model):
  temp = models.IntegerField(null=True, blank=True)  # dummy field
  class Meta:

        app_label = 'interviewbot'

        db_table = 'interviewbot_candidate'
        managed = True

class OldCandidateJobOpening(models.Model):
  temp = models.IntegerField(null=True, blank=True)  # dummy field
  class Meta:

        app_label = 'interviewbot'

        db_table = 'interviewbot_candidate_job_openings'
        managed = True

class OldClient(models.Model):
  temp = models.IntegerField(null=True, blank=True)  # dummy field
  class Meta:

        app_label = 'interviewbot'

        db_table = 'interviewbot_client'
        managed = True

class OldCompany(models.Model):
  temp = models.IntegerField(null=True, blank=True)  # dummy field
  class Meta:

        app_label = 'interviewbot'

        db_table = 'interviewbot_company'
        managed = True

class OldEmployee(models.Model):
  temp = models.IntegerField(null=True, blank=True)  # dummy field
  class Meta:

        app_label = 'interviewbot'

        db_table = 'interviewbot_employee'
        managed = True

class OldAssignEmployee(models.Model):
  temp = models.IntegerField(null=True, blank=True)  # dummy field
  class Meta:

        app_label = 'interviewbot'

        db_table = 'interviewbot_jobopening_assignemployee'
        managed = True

# class OldAnalysis(models.Model):
#   temp = models.IntegerField(null=True, blank=True)  # dummy field
#   class Meta:

#         app_label = 'interviewbot'

#         db_table = 'interviewbot_resumeanalysis'
#         managed = True